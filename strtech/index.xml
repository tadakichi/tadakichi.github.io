<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts of strategies and techniques on Jason&#39;s Quant World</title>
    <link>https://tadakichi.github.io/strtech/</link>
    <description>Recent content in Posts of strategies and techniques on Jason&#39;s Quant World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Jason Lee</copyright>
    <lastBuildDate>Sun, 03 Sep 2017 08:13:17 -0700</lastBuildDate>
    
	<atom:link href="https://tadakichi.github.io/strtech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Parallelizing quant portfolio calculation with Java ForkJoin Framework</title>
      <link>https://tadakichi.github.io/strtech/parallelizing-quant-porfoilo-calculation-java-forkjoin/</link>
      <pubDate>Thu, 28 Sep 2017 05:27:22 -0700</pubDate>
      
      <guid>https://tadakichi.github.io/strtech/parallelizing-quant-porfoilo-calculation-java-forkjoin/</guid>
      <description>parallelizing quant portfolio calculation with Java ForkJoin Framework
This time, I&amp;rsquo;ll demonstrate how my quant program parallelizes portfolio calculation with Java ForkJoin framework.
 forkjoin   ForkJoin framework was introduced from Java 7, and parallelStream, parallel version of stream which is included in Java 8 uses this for parallel tasks.
The model and process I&amp;rsquo;m currently using is here; model
When extracting portfolios, This process calculates all stocks including delisted stocks.</description>
    </item>
    
    <item>
      <title>Quant with Java - Calculating stocks&#39; moving average based momentum with Java Custom Collector</title>
      <link>https://tadakichi.github.io/strtech/calculate_momentum_with_java_custom_collector/</link>
      <pubDate>Sun, 03 Sep 2017 08:19:29 -0700</pubDate>
      
      <guid>https://tadakichi.github.io/strtech/calculate_momentum_with_java_custom_collector/</guid>
      <description>Purpose This time, we will see how we can read data from a file and calculate stock&amp;rsquo;s simple moving average based momentum with Java&amp;rsquo;s Stream and a custom collector.
Data As follows, stock price data is stored in a single file.
m,2007-01-02,A005930,1309000 m,2007-01-02,A000660,35550 m,2007-01-02,A005380,224500 ... m,2007-01-03,A005930,1409000 m,2007-01-03,A000660,33050 ... m,2008-01-03,A005930,1209000 m,2008-01-03,A000660,37050 ...  Price data&amp;rsquo;s DTO will be like this;
@Getter @Setter @ToString @AllArgsConstructor public class MarketDto&amp;lt;N extends Number&amp;gt; { private String type; private LocalDate date; private String symbol; private N value; @EqualsAndHashCode(callSuper = true) @ToString(callSuper = true) public static class PriceVo extends MarketDto&amp;lt;Integer&amp;gt; { public PriceVo(String type, LocalDate date, String symbol, int value) { super(type, date, symbol, value); } } .</description>
    </item>
    
  </channel>
</rss>