<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recent Posts on Jason&#39;s Quant World</title>
    <link>https://tadakichi.github.io/</link>
    <description>Recent content in Recent Posts on Jason&#39;s Quant World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Jason Lee</copyright>
    <lastBuildDate>Mon, 28 Aug 2017 08:18:47 -0700</lastBuildDate>
    
	<atom:link href="https://tadakichi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>More Rigid Backtesting</title>
      <link>https://tadakichi.github.io/model/more-rigid-backtesting/</link>
      <pubDate>Wed, 27 Dec 2017 21:13:55 -0800</pubDate>
      
      <guid>https://tadakichi.github.io/model/more-rigid-backtesting/</guid>
      <description>The model we used so far is backtested under quite a rough assumption.
Problems according to there assumptions are following:  Extract the portfolio at the end date of the month, and simulate investment at the same date. When calculating portfolio return, simply average each stocks&amp;rsquo; returns. This may exclude the possibility that we cannot fully invest available cash(if we can invest 2,000,000 dollars in each stock, and the stock price of the day is 1,000,000 dollar, It means We can invest only one stock.</description>
    </item>
    
    <item>
      <title>Quant Portfolio Return Update Oct 2017</title>
      <link>https://tadakichi.github.io/returns/quant-portfolio-return-update-oct-2017/</link>
      <pubDate>Sun, 12 Nov 2017 05:46:34 -0800</pubDate>
      
      <guid>https://tadakichi.github.io/returns/quant-portfolio-return-update-oct-2017/</guid>
      <description>The model used is here; model
The portfolio result invested from the end of August to the end of October is here; Sorry for that stock name is written in Korean. The first column of the table is code.
 008040 메리츠화재 -11.21%
006840 한화손해보험 -2.81%
001130 흥국화재 -7.88%
058850 한화 0.42%
000540 대한제분 -11.96%
041650 KG케미칼 -2.59%
000060 대한제당 6.82%
034730 KISCO홀딩스 12.10%
000370 아세아 -11.05%
092230 코리안리 -0.42%</description>
    </item>
    
    <item>
      <title>Quant Portfolio Return Update Sep 2017</title>
      <link>https://tadakichi.github.io/returns/quant-portfolio-return-update-sep-2017/</link>
      <pubDate>Sun, 12 Nov 2017 05:30:17 -0800</pubDate>
      
      <guid>https://tadakichi.github.io/returns/quant-portfolio-return-update-sep-2017/</guid>
      <description>It&amp;rsquo;s been a quite busy day, I&amp;rsquo;m updating September&amp;rsquo;s results now.
The model I used is here; I invested 10 stocks rather than 20 stocks. model
The portfolio result invested from the end of July to the end of September is here; Sorry for that stock name is written in Korean. The first column of the table is code.
 000880 한화 -2.26% 001390 KG케미칼 19.05% 001790 대한제당 1.00% 003960 사조대림 -14.</description>
    </item>
    
    <item>
      <title>Parallelizing quant portfolio calculation with Java ForkJoin Framework</title>
      <link>https://tadakichi.github.io/strtech/parallelizing-quant-porfoilo-calculation-java-forkjoin/</link>
      <pubDate>Thu, 28 Sep 2017 05:27:22 -0700</pubDate>
      
      <guid>https://tadakichi.github.io/strtech/parallelizing-quant-porfoilo-calculation-java-forkjoin/</guid>
      <description>parallelizing quant portfolio calculation with Java ForkJoin Framework
This time, I&amp;rsquo;ll demonstrate how my quant program parallelizes portfolio calculation with Java ForkJoin framework.
 forkjoin   ForkJoin framework was introduced from Java 7, and parallelStream, parallel version of stream which is included in Java 8 uses this for parallel tasks.
The model and process I&amp;rsquo;m currently using is here; model
When extracting portfolios, This process calculates all stocks including delisted stocks.</description>
    </item>
    
    <item>
      <title>Quant Portfolio Return Update Aug 2017</title>
      <link>https://tadakichi.github.io/returns/quant-portfolio-return-update-aug-2017/</link>
      <pubDate>Tue, 26 Sep 2017 07:33:39 -0700</pubDate>
      
      <guid>https://tadakichi.github.io/returns/quant-portfolio-return-update-aug-2017/</guid>
      <description>It&amp;rsquo;s been a quite busy day, I&amp;rsquo;m updating August&amp;rsquo;s results now.
The model I used is here; I invested 10 stocks rather than 20 stocks. model
The portfolio result invested from the end of May to the end of August is here; Sorry for that stock name is written in Korean. The first column of the table is code.
 000880 한화 -1.75%
001790 대한제당 -0.88%
013580 계룡건설 -3.60%
013870 지엠비코리아 15.</description>
    </item>
    
    <item>
      <title>Explanation of the current Model for investment</title>
      <link>https://tadakichi.github.io/model/explanation-current-model-investment/</link>
      <pubDate>Tue, 26 Sep 2017 05:27:23 -0700</pubDate>
      
      <guid>https://tadakichi.github.io/model/explanation-current-model-investment/</guid>
      <description>This time, I&amp;rsquo;m gonna explain the model I&amp;rsquo;m using for real investment. This model is the base model, so it will be the base when comparing with updates or changes.
Here is the simple diagram of the quant process.
 model   Every process except evaluation is calculated in rebalancing period, and evaluation is calculated in monthly.
And here are simulation results.
 fromDate=2006-12-31, toDate=2015-12-31
Total return: 1407.9304% of 108 months</description>
    </item>
    
    <item>
      <title>Quant with Java - Calculating stocks&#39; moving average based momentum with Java Custom Collector</title>
      <link>https://tadakichi.github.io/strtech/calculate_momentum_with_java_custom_collector/</link>
      <pubDate>Sun, 03 Sep 2017 08:19:29 -0700</pubDate>
      
      <guid>https://tadakichi.github.io/strtech/calculate_momentum_with_java_custom_collector/</guid>
      <description>Purpose This time, we will see how we can read data from a file and calculate stock&amp;rsquo;s simple moving average based momentum with Java&amp;rsquo;s Stream and a custom collector.
Data As follows, stock price data is stored in a single file.
m,2007-01-02,A005930,1309000 m,2007-01-02,A000660,35550 m,2007-01-02,A005380,224500 ... m,2007-01-03,A005930,1409000 m,2007-01-03,A000660,33050 ... m,2008-01-03,A005930,1209000 m,2008-01-03,A000660,37050 ...  Price data&amp;rsquo;s DTO will be like this;
@Getter @Setter @ToString @AllArgsConstructor public class MarketDto&amp;lt;N extends Number&amp;gt; { private String type; private LocalDate date; private String symbol; private N value; @EqualsAndHashCode(callSuper = true) @ToString(callSuper = true) public static class PriceVo extends MarketDto&amp;lt;Integer&amp;gt; { public PriceVo(String type, LocalDate date, String symbol, int value) { super(type, date, symbol, value); } } .</description>
    </item>
    
    <item>
      <title>Quant Portfolio Return Update Jun 2017</title>
      <link>https://tadakichi.github.io/returns/quant-portfolio-return-update-jun-2017/</link>
      <pubDate>Sun, 27 Aug 2017 05:46:35 -0700</pubDate>
      
      <guid>https://tadakichi.github.io/returns/quant-portfolio-return-update-jun-2017/</guid>
      <description>Hi, all. In here I would like to update the return of my small size portfolio which I have started investing recently.
This portfolio is 3-month rebalancing-basis, so every month I invest 1&amp;frasl;3 of my total liquidity, and after 3 months rebalance each of them.
The investing strategy is simple; 1) leave out too low market-cap stocks from the whole of Korean stock market and filter by PSR, ROE basis, 2) and invest 10 stocks of highest rank by simple momentum, volatility, and PSR variable basis.</description>
    </item>
    
  </channel>
</rss>